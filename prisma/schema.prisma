generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  addresses           Address[]
  cart                Cart?
  orders              Order[]
  paymentMethods      PaymentMethod[]
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

// Address model for shipping and billing
model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType
  firstName  String
  lastName   String
  company    String?
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Product Category
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

// Product model
model Product {
  id             String   @id @default(cuid())
  name           String
  description    String?
  price          Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  costPrice      Decimal? @db.Decimal(10, 2)
  sku            String?  @unique
  barcode        String?
  trackQty       Boolean  @default(true)
  qty            Int      @default(0)
  isActive       Boolean  @default(true)
  weight         Decimal? @db.Decimal(8, 2)
  categoryId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  category   Category    @relation(fields: [categoryId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@map("products")
}

// Shopping Cart
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

// Cart Items
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

// Order model
model Order {
  id             String      @id @default(cuid())
  userId         String
  orderNumber    String      @unique @default(cuid())
  status         OrderStatus @default(PENDING)
  subtotal       Decimal     @db.Decimal(10, 2)
  taxAmount      Decimal     @default(0) @db.Decimal(10, 2)
  shippingAmount Decimal     @default(0) @db.Decimal(10, 2)
  discountAmount Decimal     @default(0) @db.Decimal(10, 2)
  total          Decimal     @db.Decimal(10, 2)
  currency       String      @default("USD")

  // Shipping Address (stored as JSON for immutability)
  shippingAddress Json?
  billingAddress  Json?

  // Payment
  paymentMethodId String?
  paymentStatus   PaymentStatus @default(PENDING)

  // Notes
  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  paymentMethod PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

// Order Items
model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  productId    String
  productName  String // Store product name at time of order
  productPrice Decimal  @db.Decimal(10, 2) // Store price at time of order
  quantity     Int
  total        Decimal  @db.Decimal(10, 2)
  createdAt    DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Payment Methods
model PaymentMethod {
  id          String      @id @default(cuid())
  userId      String
  type        PaymentType
  provider    String // stripe, paypal, etc.
  last4       String? // Last 4 digits of card
  expiryMonth Int?
  expiryYear  Int?
  isDefault   Boolean     @default(false)
  isActive    Boolean     @default(true)

  // Provider-specific data (encrypted in production)
  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("payment_methods")
}

// Enums
enum Role {
  CUSTOMER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  BANK_TRANSFER
  DIGITAL_WALLET
}

// Password Reset Token
model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique // hashed token
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
